<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <parent>
        <artifactId>vhrserver</artifactId>
        <groupId>com.jiang</groupId>
        <version>1.0-SNAPSHOT</version>
    </parent>

    <groupId>com.jiang</groupId>
    <artifactId>vhr-web</artifactId>
    <version>0.0.1-SNAPSHOT</version>
    <name>vhr-web</name>
    <description>Demo project for Spring Boot</description>

    <dependencies>

        <!--web模块依赖于service模块-->
        <dependency>
            <groupId>com.jiang</groupId>
            <artifactId>vhr-service</artifactId>
            <version>1.0-SNAPSHOT</version>
        </dependency>

        <!--数据库驱动-->
        <dependency>
            <groupId>mysql</groupId>
            <artifactId>mysql-connector-java</artifactId>
            <scope>runtime</scope>
            <version>5.1.38</version>
        </dependency>

        <!--热部署-->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-devtools</artifactId>
            <scope>runtime</scope>
            <optional>true</optional>
        </dependency>

        <!--websoket模块-->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-websocket</artifactId>
        </dependency>

        <!--测试模块-->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
            <exclusions>
                <exclusion>
                    <groupId>org.junit.vintage</groupId>
                    <artifactId>junit-vintage-engine</artifactId>
                </exclusion>
            </exclusions>
        </dependency>


        <dependency>
            <groupId>org.springframework.security</groupId>
            <artifactId>spring-security-test</artifactId>
            <scope>test</scope>
        </dependency>


    </dependencies>

    <properties>
        <java.version>1.8</java.version>
        <docker.image.prefix>lilinjiang</docker.image.prefix>
    </properties>

    <build>
        <plugins>
            <!--启动插件-->
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
            </plugin>
            <!--配置部署到远程docker中-->
            <!--一键部署-->
            <plugin>
                <groupId>com.spotify</groupId>
                <artifactId>docker-maven-plugin</artifactId>
                <version>1.0.0</version>
                <configuration>
                    <!--指定生成的镜像名-->
                    <imageName>${docker.image.prefix}/${project.artifactId}</imageName>
                    <!--指定标签-->
                    <imageTags>
                        <imageTag>latest</imageTag>
                    </imageTags>
                    <!--基础镜像-->
                    <baseImage>java:8</baseImage>
                    <!--作者信息-->
                    <maintainer>lilinjiang</maintainer>
                    <!--切换到/ROOT目录-->
                    <workdir>/ROOT</workdir>
                    <cmd>["java","-version"]</cmd>
                    <entryPoint>["java","-jar","${project.build.finalName}.jar"]</entryPoint>

                    <!--&lt;!&ndash; 指定 Dockerfile 路径  ${project.basedir}：项目根路径下&ndash;&gt;-->
                    <!--<dockerDirectory>${project.basedir}</dockerDirectory>-->

                    <!--指定远程 docker api地址-->
                    <dockerHost>http://47.102.139.164:2375</dockerHost>

                    <resources>
                        <resource>
                            <targetPath>/ROOT</targetPath>
                            <!--用于指定需要复制的跟目录 此处配置的${project.build.directory}是 即对应 target 目录-->
                            <directory>${project.build.directory}</directory>
                            <!-- 需要包含的 jar包 ，这里对应的是 Dockerfile中添加的文件名　-->
                            <include>${project.build.finalName}.jar</include>
                        </resource>
                    </resources>

                </configuration>
            </plugin>
        </plugins>
        <resources>
            <resource>
                <directory>src/main/resources</directory>
            </resource>
            <resource>
                <directory>src/main/java</directory>
                <includes>
                    <include>**/*.xml</include>
                </includes>
            </resource>
        </resources>
    </build>
</project>
